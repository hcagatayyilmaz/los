generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  firstName        String
  lastName         String
  profileImage     String?
  points           Int               @default(0)
  checkIns         CheckIn[]
  transactions     Transaction[]
  userBadges       UserBadge[]
  userHideAndSeeks UserHideAndSeek[]
  QuizAnswers      UserQuiz[]
}

enum AttractionType {
  PLACE
  EVENT
  POINT
}

model Attraction {
  id               String            @id @default(cuid())
  type             AttractionType
  name             String
  latitude         Float
  longitude        Float
  points           Int
  cityId           String
  city             City              @relation(fields: [cityId], references: [id])
  checkIns         CheckIn[]
  hideAndSeeks     HideAndSeek[]
  userHideAndSeeks UserHideAndSeek[]
}

model CheckIn {
  id           String     @id @default(cuid())
  userId       String
  attractionId String
  user         User       @relation(fields: [userId], references: [id])
  attraction   Attraction @relation(fields: [attractionId], references: [id])
  createdAt    DateTime   @default(now())
}

model City {
  id          String       @id @default(cuid())
  name        String       @unique
  slug        String       @unique
  info        Json?
  attractions Attraction[]
}

model Reward {
  id           String        @id @default(cuid())
  name         String
  points       Int
  meta         Json
  available    Boolean       @default(true)
  transactions Transaction[]
  startAt      DateTime?
  endAt        DateTime?
}

enum TransactionType {
  EARN_POINTS
  SPEND_POINTS
}

model Transaction {
  id        String          @id @default(cuid())
  userId    String
  rewardId  String? // Make this field nullable
  points    Int
  details   String
  user      User            @relation(fields: [userId], references: [id])
  reward    Reward?         @relation(fields: [rewardId], references: [id])
  createdAt DateTime        @default(now())
  type      TransactionType

  @@unique([userId, rewardId])
}

model Badge {
  id            String      @id @default(cuid())
  name          String
  description   Json
  points        Int
  attractionIds String[]
  meta          Json
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  users         UserBadge[]
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  user      User     @relation(fields: [userId], references: [id])
  badge     Badge    @relation(fields: [badgeId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, badgeId])
}

model HideAndSeek {
  id               String            @id @default(cuid())
  name             String
  description      String
  startDate        DateTime
  endDate          DateTime
  points           Int
  attractionId     String
  attraction       Attraction        @relation(fields: [attractionId], references: [id])
  meta             Json
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userHideAndSeeks UserHideAndSeek[]
}

model UserHideAndSeek {
  id            String      @id @default(cuid())
  userId        String
  hideAndSeekId String
  user          User        @relation(fields: [userId], references: [id])
  hideAndSeek   HideAndSeek @relation(fields: [hideAndSeekId], references: [id])
  createdAt     DateTime    @default(now())
  Attraction    Attraction? @relation(fields: [attractionId], references: [id])
  attractionId  String?

  @@unique([userId, hideAndSeekId])
}

model Quiz {
  id          String     @id @default(cuid())
  question    Json
  answer      String
  points      Int
  createdAt   DateTime   @default(now())
  QuizAnswers UserQuiz[]
}

model UserQuiz {
  id               String   @id @default(cuid())
  userId           String
  quizId           String
  submitted_answer String
  user             User     @relation(fields: [userId], references: [id])
  quiz             Quiz     @relation(fields: [quizId], references: [id])
  createdAt        DateTime @default(now())

  @@unique([userId, quizId])
}
